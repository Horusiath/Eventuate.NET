akka {
  actor {
    serializers {
      eventuate-durable-event = "Eventuate.Serialization.DelegatingDurableEventSerializer, Eventuate"
      eventuate-replication-filter = "Eventuate.Serialization.ReplicationFilterSerializer, Eventuate"
      eventuate-replication-protocol = "Eventuate.Serialization.ReplicationProtocolSerializer, Eventuate"
      eventuate-snapshot = "Eventuate.Serialization.SnapshotSerializer, Eventuate"
      eventuate-crdt = "Eventuate.Crdt.CRDTSerializer, Eventuate"
    }

    serialization-bindings {
      "Eventuate.DurableEvent, Eventuate" = eventuate-durable-event
      "Eventuate.IReplicationFilterFormat, Eventuate" = eventuate-replication-filter
      "Eventuate.IReplicationProtocolFormat, Eventuate" = eventuate-replication-protocol
      "Eventuate.ConcurrentVersionsTree`2, Eventuate" = eventuate-snapshot
      "Eventuate.Snapshot, Eventuate" = eventuate-snapshot
      "Eventuate.EventLogs.EventLogClock, Eventuate" = eventuate-snapshot
      "Eventuate.ICrdtFormat" = eventuate-crdt
    }
  }
}

eventuate {
  crdt {
  	  pure {
	    # Timeout for CRDT read and write operations (incl. saving snapshots).
	    operation-timeout = 10s	  
	  }
	  
	  # Timeout for CRDT read and write operations (incl. saving snapshots).
	  operation-timeout = 10s
  }
  log {
    # Timeout for read operations from a local event log. These are batch
    # event reads during event replay made by event-sourced views, actors,
    # writers and processors and target log reads made by processors.
    read-timeout = 10s

    # Timeout for write operations to a local event log. These are batch
    # event writes made by event-sourced processors and replicators. This
    # timeout does not apply to event-sourced actor writes.
    write-timeout = 10s

    # Target batch size for writing events. It is used by the batching layer
    # to limit the size of event batches to be written atomically to an event
    # log. It also limits the size of event batches replicated from remote
    # source logs and to a local target log. Please note that this is not
    # a strict batch size limit. Event-sourced actors can still emit batches
    # of larger size (although it is very uncommon to emit that many events
    # per command).
    write-batch-size = 64

    # Maximum number of events to be replayed to an event-sourced view, actor,
    # writer or processor before replay is suspended. A suspended replay is
    # resumed automatically after the replayed event batch has been handled
    # (= replay backpressure).
    replay-batch-size = 4096

    # Maximum number of replay attempts before finally stopping the actor itself
    replay-retry-max = 10

    # Delay between consecutive replay attempts
    replay-retry-delay = 10s
  }

  log.circuit-breaker {
    # Number of write retries after which the circuit breaker should be opened.
    open-after-retries = 2
  }

  log.replication {
    # Event replication retry delay. Event replication is delayed for the
    # given duration if a previous transfer batch was empty or failed.
    retry-delay = 5s

    # Timeout for reading events from the remote source log.
    remote-read-timeout = 10s

    # Maximum number of events to scan in a remote event log per replication
    # read request.
    remote-scan-limit = 65536

    # Minimum duration of failed communication with a remote replication
    # endpoint required to consider that endpoint as unavailable.
    failure-detection-limit = 60s

    # If turned on, notifications about updates in a source event log are sent
    # to remote replication endpoints which reduces event replication latency.
    # The impact of sending update notifications on average replication latency
    # decreases with increasing event write load. Applications with high event
    # write load may even experience increased event replication throughput if
    # update notifications are turned off.
    update-notifications = on
  }

  log.recovery {
    # Maximum number of retries of remote operations. These are operations
    # that read from remote replication endpoints.
    remote-operation-retry-max = 3

    # Delay before re-trying a remote operation after a previous failure.
    remote-operation-retry-delay = 10s

    # Timeout of remote operations.
    remote-operation-timeout = 10s

    # Timeout for deleting invalidated snapshots.
    snapshot-deletion-timeout = 30s
  }

  log.dispatchers {
    write-dispatcher {
      executor = "thread-pool-executor"
      type = PinnedDispatcher
    }

    read-dispatcher {
      type = Dispatcher
      executor = "fork-join-executor"
      fork-join-executor {
        parallelism-min = 2
        parallelism-max = 16
      }
    }
  }

  snapshot {
    # Timeout for loading a snapshot.
    load-timeout = 10m

    # Timeout for saving a snapshot.
    save-timeout = 10m
  }

  snapshot.filesystem {
    # Root directory for storing the snapshot files of individual emitters.
    dir = target

    # Maximum number of stored snapshots per emitter. If this number is
    # exceeded during a snapshot write, older snapshots are automatically
    # deleted.
    snapshots-per-emitter-max = 3

    write-dispatcher {
      type = Dispatcher
      executor = "fork-join-executor"
      fork-join-executor {
        parallelism-min = 2
        parallelism-max = 8
      }
    }

    read-dispatcher {
      type = Dispatcher
      executor = "fork-join-executor"
      fork-join-executor {
        parallelism-min = 2
        parallelism-max = 32
      }
    }
  }
}
