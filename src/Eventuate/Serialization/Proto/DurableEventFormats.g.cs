// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: DurableEventFormats.proto
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace Eventuate.Serialization.Proto {

  /// <summary>Holder for reflection information generated from DurableEventFormats.proto</summary>
  internal static partial class DurableEventFormatsReflection {

    #region Descriptor
    /// <summary>File descriptor for DurableEventFormats.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static DurableEventFormatsReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "ChlEdXJhYmxlRXZlbnRGb3JtYXRzLnByb3RvEh1FdmVudHVhdGUuU2VyaWFs",
            "aXphdGlvbi5Qcm90bxoTQ29tbW9uRm9ybWF0cy5wcm90byLKAwoSRHVyYWJs",
            "ZUV2ZW50Rm9ybWF0Ej0KB3BheWxvYWQYASABKAsyLC5FdmVudHVhdGUuU2Vy",
            "aWFsaXphdGlvbi5Qcm90by5QYXlsb2FkRm9ybWF0EhEKCWVtaXR0ZXJJZBgC",
            "IAEoCRIaChJlbWl0dGVyQWdncmVnYXRlSWQYAyABKAkSJQodY3VzdG9tRGVz",
            "dGluYXRpb25BZ2dyZWdhdGVJZHMYBCADKAkSFwoPc3lzdGVtVGltZXN0YW1w",
            "GAUgASgDEkgKD3ZlY3RvclRpbWVzdGFtcBgGIAEoCzIvLkV2ZW50dWF0ZS5T",
            "ZXJpYWxpemF0aW9uLlByb3RvLlZlY3RvclRpbWVGb3JtYXQSEQoJcHJvY2Vz",
            "c0lkGAcgASgJEhIKCmxvY2FsTG9nSWQYCCABKAkSFwoPbG9jYWxTZXF1ZW5j",
            "ZU5yGAkgASgDEiAKGHBlcnNpc3RPbkV2ZW50U2VxdWVuY2VOchgKIAEoAxIS",
            "CgpkZWxpdmVyeUlkGAsgASgJEkYKEHBlcnNpc3RPbkV2ZW50SWQYDCABKAsy",
            "LC5FdmVudHVhdGUuU2VyaWFsaXphdGlvbi5Qcm90by5FdmVudElkRm9ybWF0",
            "IjYKDUV2ZW50SWRGb3JtYXQSEQoJcHJvY2Vzc0lkGAEgASgJEhIKCnNlcXVl",
            "bmNlTnIYAiABKANiBnByb3RvMw=="));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { global::Eventuate.Serialization.Proto.CommonFormatsReflection.Descriptor, },
          new pbr::GeneratedClrTypeInfo(null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::Eventuate.Serialization.Proto.DurableEventFormat), global::Eventuate.Serialization.Proto.DurableEventFormat.Parser, new[]{ "Payload", "EmitterId", "EmitterAggregateId", "CustomDestinationAggregateIds", "SystemTimestamp", "VectorTimestamp", "ProcessId", "LocalLogId", "LocalSequenceNr", "PersistOnEventSequenceNr", "DeliveryId", "PersistOnEventId" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Eventuate.Serialization.Proto.EventIdFormat), global::Eventuate.Serialization.Proto.EventIdFormat.Parser, new[]{ "ProcessId", "SequenceNr" }, null, null, null)
          }));
    }
    #endregion

  }
  #region Messages
  internal sealed partial class DurableEventFormat : pb::IMessage<DurableEventFormat> {
    private static readonly pb::MessageParser<DurableEventFormat> _parser = new pb::MessageParser<DurableEventFormat>(() => new DurableEventFormat());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<DurableEventFormat> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Eventuate.Serialization.Proto.DurableEventFormatsReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DurableEventFormat() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DurableEventFormat(DurableEventFormat other) : this() {
      Payload = other.payload_ != null ? other.Payload.Clone() : null;
      emitterId_ = other.emitterId_;
      emitterAggregateId_ = other.emitterAggregateId_;
      customDestinationAggregateIds_ = other.customDestinationAggregateIds_.Clone();
      systemTimestamp_ = other.systemTimestamp_;
      VectorTimestamp = other.vectorTimestamp_ != null ? other.VectorTimestamp.Clone() : null;
      processId_ = other.processId_;
      localLogId_ = other.localLogId_;
      localSequenceNr_ = other.localSequenceNr_;
      persistOnEventSequenceNr_ = other.persistOnEventSequenceNr_;
      deliveryId_ = other.deliveryId_;
      PersistOnEventId = other.persistOnEventId_ != null ? other.PersistOnEventId.Clone() : null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DurableEventFormat Clone() {
      return new DurableEventFormat(this);
    }

    /// <summary>Field number for the "payload" field.</summary>
    public const int PayloadFieldNumber = 1;
    private global::Eventuate.Serialization.Proto.PayloadFormat payload_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Eventuate.Serialization.Proto.PayloadFormat Payload {
      get { return payload_; }
      set {
        payload_ = value;
      }
    }

    /// <summary>Field number for the "emitterId" field.</summary>
    public const int EmitterIdFieldNumber = 2;
    private string emitterId_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string EmitterId {
      get { return emitterId_; }
      set {
        emitterId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "emitterAggregateId" field.</summary>
    public const int EmitterAggregateIdFieldNumber = 3;
    private string emitterAggregateId_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string EmitterAggregateId {
      get { return emitterAggregateId_; }
      set {
        emitterAggregateId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "customDestinationAggregateIds" field.</summary>
    public const int CustomDestinationAggregateIdsFieldNumber = 4;
    private static readonly pb::FieldCodec<string> _repeated_customDestinationAggregateIds_codec
        = pb::FieldCodec.ForString(34);
    private readonly pbc::RepeatedField<string> customDestinationAggregateIds_ = new pbc::RepeatedField<string>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<string> CustomDestinationAggregateIds {
      get { return customDestinationAggregateIds_; }
    }

    /// <summary>Field number for the "systemTimestamp" field.</summary>
    public const int SystemTimestampFieldNumber = 5;
    private long systemTimestamp_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long SystemTimestamp {
      get { return systemTimestamp_; }
      set {
        systemTimestamp_ = value;
      }
    }

    /// <summary>Field number for the "vectorTimestamp" field.</summary>
    public const int VectorTimestampFieldNumber = 6;
    private global::Eventuate.Serialization.Proto.VectorTimeFormat vectorTimestamp_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Eventuate.Serialization.Proto.VectorTimeFormat VectorTimestamp {
      get { return vectorTimestamp_; }
      set {
        vectorTimestamp_ = value;
      }
    }

    /// <summary>Field number for the "processId" field.</summary>
    public const int ProcessIdFieldNumber = 7;
    private string processId_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string ProcessId {
      get { return processId_; }
      set {
        processId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "localLogId" field.</summary>
    public const int LocalLogIdFieldNumber = 8;
    private string localLogId_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string LocalLogId {
      get { return localLogId_; }
      set {
        localLogId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "localSequenceNr" field.</summary>
    public const int LocalSequenceNrFieldNumber = 9;
    private long localSequenceNr_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long LocalSequenceNr {
      get { return localSequenceNr_; }
      set {
        localSequenceNr_ = value;
      }
    }

    /// <summary>Field number for the "persistOnEventSequenceNr" field.</summary>
    public const int PersistOnEventSequenceNrFieldNumber = 10;
    private long persistOnEventSequenceNr_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long PersistOnEventSequenceNr {
      get { return persistOnEventSequenceNr_; }
      set {
        persistOnEventSequenceNr_ = value;
      }
    }

    /// <summary>Field number for the "deliveryId" field.</summary>
    public const int DeliveryIdFieldNumber = 11;
    private string deliveryId_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string DeliveryId {
      get { return deliveryId_; }
      set {
        deliveryId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "persistOnEventId" field.</summary>
    public const int PersistOnEventIdFieldNumber = 12;
    private global::Eventuate.Serialization.Proto.EventIdFormat persistOnEventId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Eventuate.Serialization.Proto.EventIdFormat PersistOnEventId {
      get { return persistOnEventId_; }
      set {
        persistOnEventId_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as DurableEventFormat);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(DurableEventFormat other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Payload, other.Payload)) return false;
      if (EmitterId != other.EmitterId) return false;
      if (EmitterAggregateId != other.EmitterAggregateId) return false;
      if(!customDestinationAggregateIds_.Equals(other.customDestinationAggregateIds_)) return false;
      if (SystemTimestamp != other.SystemTimestamp) return false;
      if (!object.Equals(VectorTimestamp, other.VectorTimestamp)) return false;
      if (ProcessId != other.ProcessId) return false;
      if (LocalLogId != other.LocalLogId) return false;
      if (LocalSequenceNr != other.LocalSequenceNr) return false;
      if (PersistOnEventSequenceNr != other.PersistOnEventSequenceNr) return false;
      if (DeliveryId != other.DeliveryId) return false;
      if (!object.Equals(PersistOnEventId, other.PersistOnEventId)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (payload_ != null) hash ^= Payload.GetHashCode();
      if (EmitterId.Length != 0) hash ^= EmitterId.GetHashCode();
      if (EmitterAggregateId.Length != 0) hash ^= EmitterAggregateId.GetHashCode();
      hash ^= customDestinationAggregateIds_.GetHashCode();
      if (SystemTimestamp != 0L) hash ^= SystemTimestamp.GetHashCode();
      if (vectorTimestamp_ != null) hash ^= VectorTimestamp.GetHashCode();
      if (ProcessId.Length != 0) hash ^= ProcessId.GetHashCode();
      if (LocalLogId.Length != 0) hash ^= LocalLogId.GetHashCode();
      if (LocalSequenceNr != 0L) hash ^= LocalSequenceNr.GetHashCode();
      if (PersistOnEventSequenceNr != 0L) hash ^= PersistOnEventSequenceNr.GetHashCode();
      if (DeliveryId.Length != 0) hash ^= DeliveryId.GetHashCode();
      if (persistOnEventId_ != null) hash ^= PersistOnEventId.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (payload_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Payload);
      }
      if (EmitterId.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(EmitterId);
      }
      if (EmitterAggregateId.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(EmitterAggregateId);
      }
      customDestinationAggregateIds_.WriteTo(output, _repeated_customDestinationAggregateIds_codec);
      if (SystemTimestamp != 0L) {
        output.WriteRawTag(40);
        output.WriteInt64(SystemTimestamp);
      }
      if (vectorTimestamp_ != null) {
        output.WriteRawTag(50);
        output.WriteMessage(VectorTimestamp);
      }
      if (ProcessId.Length != 0) {
        output.WriteRawTag(58);
        output.WriteString(ProcessId);
      }
      if (LocalLogId.Length != 0) {
        output.WriteRawTag(66);
        output.WriteString(LocalLogId);
      }
      if (LocalSequenceNr != 0L) {
        output.WriteRawTag(72);
        output.WriteInt64(LocalSequenceNr);
      }
      if (PersistOnEventSequenceNr != 0L) {
        output.WriteRawTag(80);
        output.WriteInt64(PersistOnEventSequenceNr);
      }
      if (DeliveryId.Length != 0) {
        output.WriteRawTag(90);
        output.WriteString(DeliveryId);
      }
      if (persistOnEventId_ != null) {
        output.WriteRawTag(98);
        output.WriteMessage(PersistOnEventId);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (payload_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Payload);
      }
      if (EmitterId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(EmitterId);
      }
      if (EmitterAggregateId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(EmitterAggregateId);
      }
      size += customDestinationAggregateIds_.CalculateSize(_repeated_customDestinationAggregateIds_codec);
      if (SystemTimestamp != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(SystemTimestamp);
      }
      if (vectorTimestamp_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(VectorTimestamp);
      }
      if (ProcessId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ProcessId);
      }
      if (LocalLogId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(LocalLogId);
      }
      if (LocalSequenceNr != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(LocalSequenceNr);
      }
      if (PersistOnEventSequenceNr != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(PersistOnEventSequenceNr);
      }
      if (DeliveryId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(DeliveryId);
      }
      if (persistOnEventId_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(PersistOnEventId);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(DurableEventFormat other) {
      if (other == null) {
        return;
      }
      if (other.payload_ != null) {
        if (payload_ == null) {
          payload_ = new global::Eventuate.Serialization.Proto.PayloadFormat();
        }
        Payload.MergeFrom(other.Payload);
      }
      if (other.EmitterId.Length != 0) {
        EmitterId = other.EmitterId;
      }
      if (other.EmitterAggregateId.Length != 0) {
        EmitterAggregateId = other.EmitterAggregateId;
      }
      customDestinationAggregateIds_.Add(other.customDestinationAggregateIds_);
      if (other.SystemTimestamp != 0L) {
        SystemTimestamp = other.SystemTimestamp;
      }
      if (other.vectorTimestamp_ != null) {
        if (vectorTimestamp_ == null) {
          vectorTimestamp_ = new global::Eventuate.Serialization.Proto.VectorTimeFormat();
        }
        VectorTimestamp.MergeFrom(other.VectorTimestamp);
      }
      if (other.ProcessId.Length != 0) {
        ProcessId = other.ProcessId;
      }
      if (other.LocalLogId.Length != 0) {
        LocalLogId = other.LocalLogId;
      }
      if (other.LocalSequenceNr != 0L) {
        LocalSequenceNr = other.LocalSequenceNr;
      }
      if (other.PersistOnEventSequenceNr != 0L) {
        PersistOnEventSequenceNr = other.PersistOnEventSequenceNr;
      }
      if (other.DeliveryId.Length != 0) {
        DeliveryId = other.DeliveryId;
      }
      if (other.persistOnEventId_ != null) {
        if (persistOnEventId_ == null) {
          persistOnEventId_ = new global::Eventuate.Serialization.Proto.EventIdFormat();
        }
        PersistOnEventId.MergeFrom(other.PersistOnEventId);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            if (payload_ == null) {
              payload_ = new global::Eventuate.Serialization.Proto.PayloadFormat();
            }
            input.ReadMessage(payload_);
            break;
          }
          case 18: {
            EmitterId = input.ReadString();
            break;
          }
          case 26: {
            EmitterAggregateId = input.ReadString();
            break;
          }
          case 34: {
            customDestinationAggregateIds_.AddEntriesFrom(input, _repeated_customDestinationAggregateIds_codec);
            break;
          }
          case 40: {
            SystemTimestamp = input.ReadInt64();
            break;
          }
          case 50: {
            if (vectorTimestamp_ == null) {
              vectorTimestamp_ = new global::Eventuate.Serialization.Proto.VectorTimeFormat();
            }
            input.ReadMessage(vectorTimestamp_);
            break;
          }
          case 58: {
            ProcessId = input.ReadString();
            break;
          }
          case 66: {
            LocalLogId = input.ReadString();
            break;
          }
          case 72: {
            LocalSequenceNr = input.ReadInt64();
            break;
          }
          case 80: {
            PersistOnEventSequenceNr = input.ReadInt64();
            break;
          }
          case 90: {
            DeliveryId = input.ReadString();
            break;
          }
          case 98: {
            if (persistOnEventId_ == null) {
              persistOnEventId_ = new global::Eventuate.Serialization.Proto.EventIdFormat();
            }
            input.ReadMessage(persistOnEventId_);
            break;
          }
        }
      }
    }

  }

  internal sealed partial class EventIdFormat : pb::IMessage<EventIdFormat> {
    private static readonly pb::MessageParser<EventIdFormat> _parser = new pb::MessageParser<EventIdFormat>(() => new EventIdFormat());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<EventIdFormat> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Eventuate.Serialization.Proto.DurableEventFormatsReflection.Descriptor.MessageTypes[1]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public EventIdFormat() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public EventIdFormat(EventIdFormat other) : this() {
      processId_ = other.processId_;
      sequenceNr_ = other.sequenceNr_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public EventIdFormat Clone() {
      return new EventIdFormat(this);
    }

    /// <summary>Field number for the "processId" field.</summary>
    public const int ProcessIdFieldNumber = 1;
    private string processId_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string ProcessId {
      get { return processId_; }
      set {
        processId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "sequenceNr" field.</summary>
    public const int SequenceNrFieldNumber = 2;
    private long sequenceNr_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long SequenceNr {
      get { return sequenceNr_; }
      set {
        sequenceNr_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as EventIdFormat);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(EventIdFormat other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (ProcessId != other.ProcessId) return false;
      if (SequenceNr != other.SequenceNr) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (ProcessId.Length != 0) hash ^= ProcessId.GetHashCode();
      if (SequenceNr != 0L) hash ^= SequenceNr.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (ProcessId.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(ProcessId);
      }
      if (SequenceNr != 0L) {
        output.WriteRawTag(16);
        output.WriteInt64(SequenceNr);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (ProcessId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ProcessId);
      }
      if (SequenceNr != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(SequenceNr);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(EventIdFormat other) {
      if (other == null) {
        return;
      }
      if (other.ProcessId.Length != 0) {
        ProcessId = other.ProcessId;
      }
      if (other.SequenceNr != 0L) {
        SequenceNr = other.SequenceNr;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            ProcessId = input.ReadString();
            break;
          }
          case 16: {
            SequenceNr = input.ReadInt64();
            break;
          }
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code
