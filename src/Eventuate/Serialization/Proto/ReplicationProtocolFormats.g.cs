// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: ReplicationProtocolFormats.proto
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace Eventuate.Serialization.Proto {

  /// <summary>Holder for reflection information generated from ReplicationProtocolFormats.proto</summary>
  internal static partial class ReplicationProtocolFormatsReflection {

    #region Descriptor
    /// <summary>File descriptor for ReplicationProtocolFormats.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static ReplicationProtocolFormatsReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "CiBSZXBsaWNhdGlvblByb3RvY29sRm9ybWF0cy5wcm90bxIdRXZlbnR1YXRl",
            "LlNlcmlhbGl6YXRpb24uUHJvdG8aE0NvbW1vbkZvcm1hdHMucHJvdG8aGUR1",
            "cmFibGVFdmVudEZvcm1hdHMucHJvdG8aHlJlcGxpY2F0aW9uRmlsdGVyRm9y",
            "bWF0cy5wcm90byI4ChhBcHBsaWNhdGlvblZlcnNpb25Gb3JtYXQSDQoFbWFq",
            "b3IYASABKAUSDQoFbWlub3IYAiABKAUiNAoNTG9nSW5mb0Zvcm1hdBIPCgds",
            "b2dOYW1lGAEgASgJEhIKCnNlcXVlbmNlTnIYAiABKAMicwodUmVwbGljYXRp",
            "b25FbmRwb2ludEluZm9Gb3JtYXQSEgoKZW5kcG9pbnRJZBgBIAEoCRI+Cghs",
            "b2dJbmZvcxgCIAMoCzIsLkV2ZW50dWF0ZS5TZXJpYWxpemF0aW9uLlByb3Rv",
            "LkxvZ0luZm9Gb3JtYXQiIgogR2V0UmVwbGljYXRpb25FbmRwb2ludEluZm9G",
            "b3JtYXQidQonR2V0UmVwbGljYXRpb25FbmRwb2ludEluZm9TdWNjZXNzRm9y",
            "bWF0EkoKBGluZm8YASABKAsyPC5FdmVudHVhdGUuU2VyaWFsaXphdGlvbi5Q",
            "cm90by5SZXBsaWNhdGlvbkVuZHBvaW50SW5mb0Zvcm1hdCJyCiRTeW5jaHJv",
            "bml6ZVJlcGxpY2F0aW9uUHJvZ3Jlc3NGb3JtYXQSSgoEaW5mbxgBIAEoCzI8",
            "LkV2ZW50dWF0ZS5TZXJpYWxpemF0aW9uLlByb3RvLlJlcGxpY2F0aW9uRW5k",
            "cG9pbnRJbmZvRm9ybWF0InkKK1N5bmNocm9uaXplUmVwbGljYXRpb25Qcm9n",
            "cmVzc1N1Y2Nlc3NGb3JtYXQSSgoEaW5mbxgBIAEoCzI8LkV2ZW50dWF0ZS5T",
            "ZXJpYWxpemF0aW9uLlByb3RvLlJlcGxpY2F0aW9uRW5kcG9pbnRJbmZvRm9y",
            "bWF0ImoKK1N5bmNocm9uaXplUmVwbGljYXRpb25Qcm9ncmVzc0ZhaWx1cmVG",
            "b3JtYXQSOwoFY2F1c2UYASABKAsyLC5FdmVudHVhdGUuU2VyaWFsaXphdGlv",
            "bi5Qcm90by5QYXlsb2FkRm9ybWF0IkYKM1N5bmNocm9uaXplUmVwbGljYXRp",
            "b25Qcm9ncmVzc1NvdXJjZUV4Y2VwdGlvbkZvcm1hdBIPCgdtZXNzYWdlGAEg",
            "ASgJIvEBCh1SZXBsaWNhdGlvblJlYWRFbnZlbG9wZUZvcm1hdBJFCgdwYXls",
            "b2FkGAEgASgLMjQuRXZlbnR1YXRlLlNlcmlhbGl6YXRpb24uUHJvdG8uUmVw",
            "bGljYXRpb25SZWFkRm9ybWF0Eg8KB2xvZ05hbWUYAiABKAkSHQoVdGFyZ2V0",
            "QXBwbGljYXRpb25OYW1lGAMgASgJElkKGHRhcmdldEFwcGxpY2F0aW9uVmVy",
            "c2lvbhgEIAEoCzI3LkV2ZW50dWF0ZS5TZXJpYWxpemF0aW9uLlByb3RvLkFw",
            "cGxpY2F0aW9uVmVyc2lvbkZvcm1hdCKZAgoVUmVwbGljYXRpb25SZWFkRm9y",
            "bWF0EhYKDmZyb21TZXF1ZW5jZU5yGAEgASgDEgsKA21heBgCIAEoBRIRCglz",
            "Y2FuTGltaXQYAyABKAUSSgoGZmlsdGVyGAQgASgLMjouRXZlbnR1YXRlLlNl",
            "cmlhbGl6YXRpb24uUHJvdG8uUmVwbGljYXRpb25GaWx0ZXJUcmVlRm9ybWF0",
            "EhMKC3RhcmdldExvZ0lkGAUgASgJEhIKCnJlcGxpY2F0b3IYBiABKAkSUwoa",
            "Y3VycmVudFRhcmdldFZlcnNpb25WZWN0b3IYByABKAsyLy5FdmVudHVhdGUu",
            "U2VyaWFsaXphdGlvbi5Qcm90by5WZWN0b3JUaW1lRm9ybWF0IoACChxSZXBs",
            "aWNhdGlvblJlYWRTdWNjZXNzRm9ybWF0EkEKBmV2ZW50cxgBIAMoCzIxLkV2",
            "ZW50dWF0ZS5TZXJpYWxpemF0aW9uLlByb3RvLkR1cmFibGVFdmVudEZvcm1h",
            "dBIWCg5mcm9tU2VxdWVuY2VOchgCIAEoAxIbChNyZXBsaWNhdGlvblByb2dy",
            "ZXNzGAMgASgDEhMKC3RhcmdldExvZ0lkGAQgASgJElMKGmN1cnJlbnRTb3Vy",
            "Y2VWZXJzaW9uVmVjdG9yGAUgASgLMi8uRXZlbnR1YXRlLlNlcmlhbGl6YXRp",
            "b24uUHJvdG8uVmVjdG9yVGltZUZvcm1hdCJwChxSZXBsaWNhdGlvblJlYWRG",
            "YWlsdXJlRm9ybWF0EjsKBWNhdXNlGAEgASgLMiwuRXZlbnR1YXRlLlNlcmlh",
            "bGl6YXRpb24uUHJvdG8uUGF5bG9hZEZvcm1hdBITCgt0YXJnZXRMb2dJZBgC",
            "IAEoCSI3CiRSZXBsaWNhdGlvblJlYWRTb3VyY2VFeGNlcHRpb25Gb3JtYXQS",
            "DwoHbWVzc2FnZRgBIAEoCSL/AQotSW5jb21wYXRpYmxlQXBwbGljYXRpb25W",
            "ZXJzaW9uRXhjZXB0aW9uRm9ybWF0EhgKEHNvdXJjZUVuZHBvaW50SWQYASAB",
            "KAkSWQoYc291cmNlQXBwbGljYXRpb25WZXJzaW9uGAIgASgLMjcuRXZlbnR1",
            "YXRlLlNlcmlhbGl6YXRpb24uUHJvdG8uQXBwbGljYXRpb25WZXJzaW9uRm9y",
            "bWF0ElkKGHRhcmdldEFwcGxpY2F0aW9uVmVyc2lvbhgDIAEoCzI3LkV2ZW50",
            "dWF0ZS5TZXJpYWxpemF0aW9uLlByb3RvLkFwcGxpY2F0aW9uVmVyc2lvbkZv",
            "cm1hdCIWChRSZXBsaWNhdGlvbkR1ZUZvcm1hdGIGcHJvdG8z"));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { global::Eventuate.Serialization.Proto.CommonFormatsReflection.Descriptor, global::Eventuate.Serialization.Proto.DurableEventFormatsReflection.Descriptor, global::Eventuate.Serialization.Proto.ReplicationFilterFormatsReflection.Descriptor, },
          new pbr::GeneratedClrTypeInfo(null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::Eventuate.Serialization.Proto.ApplicationVersionFormat), global::Eventuate.Serialization.Proto.ApplicationVersionFormat.Parser, new[]{ "Major", "Minor" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Eventuate.Serialization.Proto.LogInfoFormat), global::Eventuate.Serialization.Proto.LogInfoFormat.Parser, new[]{ "LogName", "SequenceNr" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Eventuate.Serialization.Proto.ReplicationEndpointInfoFormat), global::Eventuate.Serialization.Proto.ReplicationEndpointInfoFormat.Parser, new[]{ "EndpointId", "LogInfos" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Eventuate.Serialization.Proto.GetReplicationEndpointInfoFormat), global::Eventuate.Serialization.Proto.GetReplicationEndpointInfoFormat.Parser, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Eventuate.Serialization.Proto.GetReplicationEndpointInfoSuccessFormat), global::Eventuate.Serialization.Proto.GetReplicationEndpointInfoSuccessFormat.Parser, new[]{ "Info" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Eventuate.Serialization.Proto.SynchronizeReplicationProgressFormat), global::Eventuate.Serialization.Proto.SynchronizeReplicationProgressFormat.Parser, new[]{ "Info" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Eventuate.Serialization.Proto.SynchronizeReplicationProgressSuccessFormat), global::Eventuate.Serialization.Proto.SynchronizeReplicationProgressSuccessFormat.Parser, new[]{ "Info" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Eventuate.Serialization.Proto.SynchronizeReplicationProgressFailureFormat), global::Eventuate.Serialization.Proto.SynchronizeReplicationProgressFailureFormat.Parser, new[]{ "Cause" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Eventuate.Serialization.Proto.SynchronizeReplicationProgressSourceExceptionFormat), global::Eventuate.Serialization.Proto.SynchronizeReplicationProgressSourceExceptionFormat.Parser, new[]{ "Message" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Eventuate.Serialization.Proto.ReplicationReadEnvelopeFormat), global::Eventuate.Serialization.Proto.ReplicationReadEnvelopeFormat.Parser, new[]{ "Payload", "LogName", "TargetApplicationName", "TargetApplicationVersion" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Eventuate.Serialization.Proto.ReplicationReadFormat), global::Eventuate.Serialization.Proto.ReplicationReadFormat.Parser, new[]{ "FromSequenceNr", "Max", "ScanLimit", "Filter", "TargetLogId", "Replicator", "CurrentTargetVersionVector" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Eventuate.Serialization.Proto.ReplicationReadSuccessFormat), global::Eventuate.Serialization.Proto.ReplicationReadSuccessFormat.Parser, new[]{ "Events", "FromSequenceNr", "ReplicationProgress", "TargetLogId", "CurrentSourceVersionVector" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Eventuate.Serialization.Proto.ReplicationReadFailureFormat), global::Eventuate.Serialization.Proto.ReplicationReadFailureFormat.Parser, new[]{ "Cause", "TargetLogId" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Eventuate.Serialization.Proto.ReplicationReadSourceExceptionFormat), global::Eventuate.Serialization.Proto.ReplicationReadSourceExceptionFormat.Parser, new[]{ "Message" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Eventuate.Serialization.Proto.IncompatibleApplicationVersionExceptionFormat), global::Eventuate.Serialization.Proto.IncompatibleApplicationVersionExceptionFormat.Parser, new[]{ "SourceEndpointId", "SourceApplicationVersion", "TargetApplicationVersion" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Eventuate.Serialization.Proto.ReplicationDueFormat), global::Eventuate.Serialization.Proto.ReplicationDueFormat.Parser, null, null, null, null)
          }));
    }
    #endregion

  }
  #region Messages
  internal sealed partial class ApplicationVersionFormat : pb::IMessage<ApplicationVersionFormat> {
    private static readonly pb::MessageParser<ApplicationVersionFormat> _parser = new pb::MessageParser<ApplicationVersionFormat>(() => new ApplicationVersionFormat());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ApplicationVersionFormat> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Eventuate.Serialization.Proto.ReplicationProtocolFormatsReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ApplicationVersionFormat() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ApplicationVersionFormat(ApplicationVersionFormat other) : this() {
      major_ = other.major_;
      minor_ = other.minor_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ApplicationVersionFormat Clone() {
      return new ApplicationVersionFormat(this);
    }

    /// <summary>Field number for the "major" field.</summary>
    public const int MajorFieldNumber = 1;
    private int major_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Major {
      get { return major_; }
      set {
        major_ = value;
      }
    }

    /// <summary>Field number for the "minor" field.</summary>
    public const int MinorFieldNumber = 2;
    private int minor_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Minor {
      get { return minor_; }
      set {
        minor_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ApplicationVersionFormat);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ApplicationVersionFormat other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Major != other.Major) return false;
      if (Minor != other.Minor) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Major != 0) hash ^= Major.GetHashCode();
      if (Minor != 0) hash ^= Minor.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Major != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Major);
      }
      if (Minor != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(Minor);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Major != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Major);
      }
      if (Minor != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Minor);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ApplicationVersionFormat other) {
      if (other == null) {
        return;
      }
      if (other.Major != 0) {
        Major = other.Major;
      }
      if (other.Minor != 0) {
        Minor = other.Minor;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Major = input.ReadInt32();
            break;
          }
          case 16: {
            Minor = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  internal sealed partial class LogInfoFormat : pb::IMessage<LogInfoFormat> {
    private static readonly pb::MessageParser<LogInfoFormat> _parser = new pb::MessageParser<LogInfoFormat>(() => new LogInfoFormat());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<LogInfoFormat> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Eventuate.Serialization.Proto.ReplicationProtocolFormatsReflection.Descriptor.MessageTypes[1]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public LogInfoFormat() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public LogInfoFormat(LogInfoFormat other) : this() {
      logName_ = other.logName_;
      sequenceNr_ = other.sequenceNr_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public LogInfoFormat Clone() {
      return new LogInfoFormat(this);
    }

    /// <summary>Field number for the "logName" field.</summary>
    public const int LogNameFieldNumber = 1;
    private string logName_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string LogName {
      get { return logName_; }
      set {
        logName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "sequenceNr" field.</summary>
    public const int SequenceNrFieldNumber = 2;
    private long sequenceNr_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long SequenceNr {
      get { return sequenceNr_; }
      set {
        sequenceNr_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as LogInfoFormat);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(LogInfoFormat other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (LogName != other.LogName) return false;
      if (SequenceNr != other.SequenceNr) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (LogName.Length != 0) hash ^= LogName.GetHashCode();
      if (SequenceNr != 0L) hash ^= SequenceNr.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (LogName.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(LogName);
      }
      if (SequenceNr != 0L) {
        output.WriteRawTag(16);
        output.WriteInt64(SequenceNr);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (LogName.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(LogName);
      }
      if (SequenceNr != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(SequenceNr);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(LogInfoFormat other) {
      if (other == null) {
        return;
      }
      if (other.LogName.Length != 0) {
        LogName = other.LogName;
      }
      if (other.SequenceNr != 0L) {
        SequenceNr = other.SequenceNr;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            LogName = input.ReadString();
            break;
          }
          case 16: {
            SequenceNr = input.ReadInt64();
            break;
          }
        }
      }
    }

  }

  internal sealed partial class ReplicationEndpointInfoFormat : pb::IMessage<ReplicationEndpointInfoFormat> {
    private static readonly pb::MessageParser<ReplicationEndpointInfoFormat> _parser = new pb::MessageParser<ReplicationEndpointInfoFormat>(() => new ReplicationEndpointInfoFormat());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ReplicationEndpointInfoFormat> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Eventuate.Serialization.Proto.ReplicationProtocolFormatsReflection.Descriptor.MessageTypes[2]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ReplicationEndpointInfoFormat() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ReplicationEndpointInfoFormat(ReplicationEndpointInfoFormat other) : this() {
      endpointId_ = other.endpointId_;
      logInfos_ = other.logInfos_.Clone();
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ReplicationEndpointInfoFormat Clone() {
      return new ReplicationEndpointInfoFormat(this);
    }

    /// <summary>Field number for the "endpointId" field.</summary>
    public const int EndpointIdFieldNumber = 1;
    private string endpointId_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string EndpointId {
      get { return endpointId_; }
      set {
        endpointId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "logInfos" field.</summary>
    public const int LogInfosFieldNumber = 2;
    private static readonly pb::FieldCodec<global::Eventuate.Serialization.Proto.LogInfoFormat> _repeated_logInfos_codec
        = pb::FieldCodec.ForMessage(18, global::Eventuate.Serialization.Proto.LogInfoFormat.Parser);
    private readonly pbc::RepeatedField<global::Eventuate.Serialization.Proto.LogInfoFormat> logInfos_ = new pbc::RepeatedField<global::Eventuate.Serialization.Proto.LogInfoFormat>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Eventuate.Serialization.Proto.LogInfoFormat> LogInfos {
      get { return logInfos_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ReplicationEndpointInfoFormat);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ReplicationEndpointInfoFormat other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (EndpointId != other.EndpointId) return false;
      if(!logInfos_.Equals(other.logInfos_)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (EndpointId.Length != 0) hash ^= EndpointId.GetHashCode();
      hash ^= logInfos_.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (EndpointId.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(EndpointId);
      }
      logInfos_.WriteTo(output, _repeated_logInfos_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (EndpointId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(EndpointId);
      }
      size += logInfos_.CalculateSize(_repeated_logInfos_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ReplicationEndpointInfoFormat other) {
      if (other == null) {
        return;
      }
      if (other.EndpointId.Length != 0) {
        EndpointId = other.EndpointId;
      }
      logInfos_.Add(other.logInfos_);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            EndpointId = input.ReadString();
            break;
          }
          case 18: {
            logInfos_.AddEntriesFrom(input, _repeated_logInfos_codec);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// no fields
  /// </summary>
  internal sealed partial class GetReplicationEndpointInfoFormat : pb::IMessage<GetReplicationEndpointInfoFormat> {
    private static readonly pb::MessageParser<GetReplicationEndpointInfoFormat> _parser = new pb::MessageParser<GetReplicationEndpointInfoFormat>(() => new GetReplicationEndpointInfoFormat());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<GetReplicationEndpointInfoFormat> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Eventuate.Serialization.Proto.ReplicationProtocolFormatsReflection.Descriptor.MessageTypes[3]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetReplicationEndpointInfoFormat() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetReplicationEndpointInfoFormat(GetReplicationEndpointInfoFormat other) : this() {
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetReplicationEndpointInfoFormat Clone() {
      return new GetReplicationEndpointInfoFormat(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as GetReplicationEndpointInfoFormat);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(GetReplicationEndpointInfoFormat other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(GetReplicationEndpointInfoFormat other) {
      if (other == null) {
        return;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
        }
      }
    }

  }

  internal sealed partial class GetReplicationEndpointInfoSuccessFormat : pb::IMessage<GetReplicationEndpointInfoSuccessFormat> {
    private static readonly pb::MessageParser<GetReplicationEndpointInfoSuccessFormat> _parser = new pb::MessageParser<GetReplicationEndpointInfoSuccessFormat>(() => new GetReplicationEndpointInfoSuccessFormat());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<GetReplicationEndpointInfoSuccessFormat> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Eventuate.Serialization.Proto.ReplicationProtocolFormatsReflection.Descriptor.MessageTypes[4]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetReplicationEndpointInfoSuccessFormat() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetReplicationEndpointInfoSuccessFormat(GetReplicationEndpointInfoSuccessFormat other) : this() {
      Info = other.info_ != null ? other.Info.Clone() : null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetReplicationEndpointInfoSuccessFormat Clone() {
      return new GetReplicationEndpointInfoSuccessFormat(this);
    }

    /// <summary>Field number for the "info" field.</summary>
    public const int InfoFieldNumber = 1;
    private global::Eventuate.Serialization.Proto.ReplicationEndpointInfoFormat info_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Eventuate.Serialization.Proto.ReplicationEndpointInfoFormat Info {
      get { return info_; }
      set {
        info_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as GetReplicationEndpointInfoSuccessFormat);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(GetReplicationEndpointInfoSuccessFormat other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Info, other.Info)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (info_ != null) hash ^= Info.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (info_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Info);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (info_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Info);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(GetReplicationEndpointInfoSuccessFormat other) {
      if (other == null) {
        return;
      }
      if (other.info_ != null) {
        if (info_ == null) {
          info_ = new global::Eventuate.Serialization.Proto.ReplicationEndpointInfoFormat();
        }
        Info.MergeFrom(other.Info);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            if (info_ == null) {
              info_ = new global::Eventuate.Serialization.Proto.ReplicationEndpointInfoFormat();
            }
            input.ReadMessage(info_);
            break;
          }
        }
      }
    }

  }

  internal sealed partial class SynchronizeReplicationProgressFormat : pb::IMessage<SynchronizeReplicationProgressFormat> {
    private static readonly pb::MessageParser<SynchronizeReplicationProgressFormat> _parser = new pb::MessageParser<SynchronizeReplicationProgressFormat>(() => new SynchronizeReplicationProgressFormat());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<SynchronizeReplicationProgressFormat> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Eventuate.Serialization.Proto.ReplicationProtocolFormatsReflection.Descriptor.MessageTypes[5]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SynchronizeReplicationProgressFormat() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SynchronizeReplicationProgressFormat(SynchronizeReplicationProgressFormat other) : this() {
      Info = other.info_ != null ? other.Info.Clone() : null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SynchronizeReplicationProgressFormat Clone() {
      return new SynchronizeReplicationProgressFormat(this);
    }

    /// <summary>Field number for the "info" field.</summary>
    public const int InfoFieldNumber = 1;
    private global::Eventuate.Serialization.Proto.ReplicationEndpointInfoFormat info_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Eventuate.Serialization.Proto.ReplicationEndpointInfoFormat Info {
      get { return info_; }
      set {
        info_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as SynchronizeReplicationProgressFormat);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(SynchronizeReplicationProgressFormat other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Info, other.Info)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (info_ != null) hash ^= Info.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (info_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Info);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (info_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Info);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(SynchronizeReplicationProgressFormat other) {
      if (other == null) {
        return;
      }
      if (other.info_ != null) {
        if (info_ == null) {
          info_ = new global::Eventuate.Serialization.Proto.ReplicationEndpointInfoFormat();
        }
        Info.MergeFrom(other.Info);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            if (info_ == null) {
              info_ = new global::Eventuate.Serialization.Proto.ReplicationEndpointInfoFormat();
            }
            input.ReadMessage(info_);
            break;
          }
        }
      }
    }

  }

  internal sealed partial class SynchronizeReplicationProgressSuccessFormat : pb::IMessage<SynchronizeReplicationProgressSuccessFormat> {
    private static readonly pb::MessageParser<SynchronizeReplicationProgressSuccessFormat> _parser = new pb::MessageParser<SynchronizeReplicationProgressSuccessFormat>(() => new SynchronizeReplicationProgressSuccessFormat());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<SynchronizeReplicationProgressSuccessFormat> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Eventuate.Serialization.Proto.ReplicationProtocolFormatsReflection.Descriptor.MessageTypes[6]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SynchronizeReplicationProgressSuccessFormat() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SynchronizeReplicationProgressSuccessFormat(SynchronizeReplicationProgressSuccessFormat other) : this() {
      Info = other.info_ != null ? other.Info.Clone() : null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SynchronizeReplicationProgressSuccessFormat Clone() {
      return new SynchronizeReplicationProgressSuccessFormat(this);
    }

    /// <summary>Field number for the "info" field.</summary>
    public const int InfoFieldNumber = 1;
    private global::Eventuate.Serialization.Proto.ReplicationEndpointInfoFormat info_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Eventuate.Serialization.Proto.ReplicationEndpointInfoFormat Info {
      get { return info_; }
      set {
        info_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as SynchronizeReplicationProgressSuccessFormat);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(SynchronizeReplicationProgressSuccessFormat other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Info, other.Info)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (info_ != null) hash ^= Info.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (info_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Info);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (info_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Info);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(SynchronizeReplicationProgressSuccessFormat other) {
      if (other == null) {
        return;
      }
      if (other.info_ != null) {
        if (info_ == null) {
          info_ = new global::Eventuate.Serialization.Proto.ReplicationEndpointInfoFormat();
        }
        Info.MergeFrom(other.Info);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            if (info_ == null) {
              info_ = new global::Eventuate.Serialization.Proto.ReplicationEndpointInfoFormat();
            }
            input.ReadMessage(info_);
            break;
          }
        }
      }
    }

  }

  internal sealed partial class SynchronizeReplicationProgressFailureFormat : pb::IMessage<SynchronizeReplicationProgressFailureFormat> {
    private static readonly pb::MessageParser<SynchronizeReplicationProgressFailureFormat> _parser = new pb::MessageParser<SynchronizeReplicationProgressFailureFormat>(() => new SynchronizeReplicationProgressFailureFormat());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<SynchronizeReplicationProgressFailureFormat> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Eventuate.Serialization.Proto.ReplicationProtocolFormatsReflection.Descriptor.MessageTypes[7]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SynchronizeReplicationProgressFailureFormat() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SynchronizeReplicationProgressFailureFormat(SynchronizeReplicationProgressFailureFormat other) : this() {
      Cause = other.cause_ != null ? other.Cause.Clone() : null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SynchronizeReplicationProgressFailureFormat Clone() {
      return new SynchronizeReplicationProgressFailureFormat(this);
    }

    /// <summary>Field number for the "cause" field.</summary>
    public const int CauseFieldNumber = 1;
    private global::Eventuate.Serialization.Proto.PayloadFormat cause_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Eventuate.Serialization.Proto.PayloadFormat Cause {
      get { return cause_; }
      set {
        cause_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as SynchronizeReplicationProgressFailureFormat);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(SynchronizeReplicationProgressFailureFormat other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Cause, other.Cause)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (cause_ != null) hash ^= Cause.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (cause_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Cause);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (cause_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Cause);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(SynchronizeReplicationProgressFailureFormat other) {
      if (other == null) {
        return;
      }
      if (other.cause_ != null) {
        if (cause_ == null) {
          cause_ = new global::Eventuate.Serialization.Proto.PayloadFormat();
        }
        Cause.MergeFrom(other.Cause);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            if (cause_ == null) {
              cause_ = new global::Eventuate.Serialization.Proto.PayloadFormat();
            }
            input.ReadMessage(cause_);
            break;
          }
        }
      }
    }

  }

  internal sealed partial class SynchronizeReplicationProgressSourceExceptionFormat : pb::IMessage<SynchronizeReplicationProgressSourceExceptionFormat> {
    private static readonly pb::MessageParser<SynchronizeReplicationProgressSourceExceptionFormat> _parser = new pb::MessageParser<SynchronizeReplicationProgressSourceExceptionFormat>(() => new SynchronizeReplicationProgressSourceExceptionFormat());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<SynchronizeReplicationProgressSourceExceptionFormat> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Eventuate.Serialization.Proto.ReplicationProtocolFormatsReflection.Descriptor.MessageTypes[8]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SynchronizeReplicationProgressSourceExceptionFormat() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SynchronizeReplicationProgressSourceExceptionFormat(SynchronizeReplicationProgressSourceExceptionFormat other) : this() {
      message_ = other.message_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SynchronizeReplicationProgressSourceExceptionFormat Clone() {
      return new SynchronizeReplicationProgressSourceExceptionFormat(this);
    }

    /// <summary>Field number for the "message" field.</summary>
    public const int MessageFieldNumber = 1;
    private string message_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Message {
      get { return message_; }
      set {
        message_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as SynchronizeReplicationProgressSourceExceptionFormat);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(SynchronizeReplicationProgressSourceExceptionFormat other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Message != other.Message) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Message.Length != 0) hash ^= Message.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Message.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Message);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Message.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Message);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(SynchronizeReplicationProgressSourceExceptionFormat other) {
      if (other == null) {
        return;
      }
      if (other.Message.Length != 0) {
        Message = other.Message;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            Message = input.ReadString();
            break;
          }
        }
      }
    }

  }

  internal sealed partial class ReplicationReadEnvelopeFormat : pb::IMessage<ReplicationReadEnvelopeFormat> {
    private static readonly pb::MessageParser<ReplicationReadEnvelopeFormat> _parser = new pb::MessageParser<ReplicationReadEnvelopeFormat>(() => new ReplicationReadEnvelopeFormat());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ReplicationReadEnvelopeFormat> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Eventuate.Serialization.Proto.ReplicationProtocolFormatsReflection.Descriptor.MessageTypes[9]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ReplicationReadEnvelopeFormat() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ReplicationReadEnvelopeFormat(ReplicationReadEnvelopeFormat other) : this() {
      Payload = other.payload_ != null ? other.Payload.Clone() : null;
      logName_ = other.logName_;
      targetApplicationName_ = other.targetApplicationName_;
      TargetApplicationVersion = other.targetApplicationVersion_ != null ? other.TargetApplicationVersion.Clone() : null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ReplicationReadEnvelopeFormat Clone() {
      return new ReplicationReadEnvelopeFormat(this);
    }

    /// <summary>Field number for the "payload" field.</summary>
    public const int PayloadFieldNumber = 1;
    private global::Eventuate.Serialization.Proto.ReplicationReadFormat payload_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Eventuate.Serialization.Proto.ReplicationReadFormat Payload {
      get { return payload_; }
      set {
        payload_ = value;
      }
    }

    /// <summary>Field number for the "logName" field.</summary>
    public const int LogNameFieldNumber = 2;
    private string logName_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string LogName {
      get { return logName_; }
      set {
        logName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "targetApplicationName" field.</summary>
    public const int TargetApplicationNameFieldNumber = 3;
    private string targetApplicationName_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string TargetApplicationName {
      get { return targetApplicationName_; }
      set {
        targetApplicationName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "targetApplicationVersion" field.</summary>
    public const int TargetApplicationVersionFieldNumber = 4;
    private global::Eventuate.Serialization.Proto.ApplicationVersionFormat targetApplicationVersion_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Eventuate.Serialization.Proto.ApplicationVersionFormat TargetApplicationVersion {
      get { return targetApplicationVersion_; }
      set {
        targetApplicationVersion_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ReplicationReadEnvelopeFormat);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ReplicationReadEnvelopeFormat other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Payload, other.Payload)) return false;
      if (LogName != other.LogName) return false;
      if (TargetApplicationName != other.TargetApplicationName) return false;
      if (!object.Equals(TargetApplicationVersion, other.TargetApplicationVersion)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (payload_ != null) hash ^= Payload.GetHashCode();
      if (LogName.Length != 0) hash ^= LogName.GetHashCode();
      if (TargetApplicationName.Length != 0) hash ^= TargetApplicationName.GetHashCode();
      if (targetApplicationVersion_ != null) hash ^= TargetApplicationVersion.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (payload_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Payload);
      }
      if (LogName.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(LogName);
      }
      if (TargetApplicationName.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(TargetApplicationName);
      }
      if (targetApplicationVersion_ != null) {
        output.WriteRawTag(34);
        output.WriteMessage(TargetApplicationVersion);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (payload_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Payload);
      }
      if (LogName.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(LogName);
      }
      if (TargetApplicationName.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(TargetApplicationName);
      }
      if (targetApplicationVersion_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(TargetApplicationVersion);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ReplicationReadEnvelopeFormat other) {
      if (other == null) {
        return;
      }
      if (other.payload_ != null) {
        if (payload_ == null) {
          payload_ = new global::Eventuate.Serialization.Proto.ReplicationReadFormat();
        }
        Payload.MergeFrom(other.Payload);
      }
      if (other.LogName.Length != 0) {
        LogName = other.LogName;
      }
      if (other.TargetApplicationName.Length != 0) {
        TargetApplicationName = other.TargetApplicationName;
      }
      if (other.targetApplicationVersion_ != null) {
        if (targetApplicationVersion_ == null) {
          targetApplicationVersion_ = new global::Eventuate.Serialization.Proto.ApplicationVersionFormat();
        }
        TargetApplicationVersion.MergeFrom(other.TargetApplicationVersion);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            if (payload_ == null) {
              payload_ = new global::Eventuate.Serialization.Proto.ReplicationReadFormat();
            }
            input.ReadMessage(payload_);
            break;
          }
          case 18: {
            LogName = input.ReadString();
            break;
          }
          case 26: {
            TargetApplicationName = input.ReadString();
            break;
          }
          case 34: {
            if (targetApplicationVersion_ == null) {
              targetApplicationVersion_ = new global::Eventuate.Serialization.Proto.ApplicationVersionFormat();
            }
            input.ReadMessage(targetApplicationVersion_);
            break;
          }
        }
      }
    }

  }

  internal sealed partial class ReplicationReadFormat : pb::IMessage<ReplicationReadFormat> {
    private static readonly pb::MessageParser<ReplicationReadFormat> _parser = new pb::MessageParser<ReplicationReadFormat>(() => new ReplicationReadFormat());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ReplicationReadFormat> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Eventuate.Serialization.Proto.ReplicationProtocolFormatsReflection.Descriptor.MessageTypes[10]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ReplicationReadFormat() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ReplicationReadFormat(ReplicationReadFormat other) : this() {
      fromSequenceNr_ = other.fromSequenceNr_;
      max_ = other.max_;
      scanLimit_ = other.scanLimit_;
      Filter = other.filter_ != null ? other.Filter.Clone() : null;
      targetLogId_ = other.targetLogId_;
      replicator_ = other.replicator_;
      CurrentTargetVersionVector = other.currentTargetVersionVector_ != null ? other.CurrentTargetVersionVector.Clone() : null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ReplicationReadFormat Clone() {
      return new ReplicationReadFormat(this);
    }

    /// <summary>Field number for the "fromSequenceNr" field.</summary>
    public const int FromSequenceNrFieldNumber = 1;
    private long fromSequenceNr_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long FromSequenceNr {
      get { return fromSequenceNr_; }
      set {
        fromSequenceNr_ = value;
      }
    }

    /// <summary>Field number for the "max" field.</summary>
    public const int MaxFieldNumber = 2;
    private int max_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Max {
      get { return max_; }
      set {
        max_ = value;
      }
    }

    /// <summary>Field number for the "scanLimit" field.</summary>
    public const int ScanLimitFieldNumber = 3;
    private int scanLimit_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int ScanLimit {
      get { return scanLimit_; }
      set {
        scanLimit_ = value;
      }
    }

    /// <summary>Field number for the "filter" field.</summary>
    public const int FilterFieldNumber = 4;
    private global::Eventuate.Serialization.Proto.ReplicationFilterTreeFormat filter_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Eventuate.Serialization.Proto.ReplicationFilterTreeFormat Filter {
      get { return filter_; }
      set {
        filter_ = value;
      }
    }

    /// <summary>Field number for the "targetLogId" field.</summary>
    public const int TargetLogIdFieldNumber = 5;
    private string targetLogId_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string TargetLogId {
      get { return targetLogId_; }
      set {
        targetLogId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "replicator" field.</summary>
    public const int ReplicatorFieldNumber = 6;
    private string replicator_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Replicator {
      get { return replicator_; }
      set {
        replicator_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "currentTargetVersionVector" field.</summary>
    public const int CurrentTargetVersionVectorFieldNumber = 7;
    private global::Eventuate.Serialization.Proto.VectorTimeFormat currentTargetVersionVector_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Eventuate.Serialization.Proto.VectorTimeFormat CurrentTargetVersionVector {
      get { return currentTargetVersionVector_; }
      set {
        currentTargetVersionVector_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ReplicationReadFormat);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ReplicationReadFormat other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (FromSequenceNr != other.FromSequenceNr) return false;
      if (Max != other.Max) return false;
      if (ScanLimit != other.ScanLimit) return false;
      if (!object.Equals(Filter, other.Filter)) return false;
      if (TargetLogId != other.TargetLogId) return false;
      if (Replicator != other.Replicator) return false;
      if (!object.Equals(CurrentTargetVersionVector, other.CurrentTargetVersionVector)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (FromSequenceNr != 0L) hash ^= FromSequenceNr.GetHashCode();
      if (Max != 0) hash ^= Max.GetHashCode();
      if (ScanLimit != 0) hash ^= ScanLimit.GetHashCode();
      if (filter_ != null) hash ^= Filter.GetHashCode();
      if (TargetLogId.Length != 0) hash ^= TargetLogId.GetHashCode();
      if (Replicator.Length != 0) hash ^= Replicator.GetHashCode();
      if (currentTargetVersionVector_ != null) hash ^= CurrentTargetVersionVector.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (FromSequenceNr != 0L) {
        output.WriteRawTag(8);
        output.WriteInt64(FromSequenceNr);
      }
      if (Max != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(Max);
      }
      if (ScanLimit != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(ScanLimit);
      }
      if (filter_ != null) {
        output.WriteRawTag(34);
        output.WriteMessage(Filter);
      }
      if (TargetLogId.Length != 0) {
        output.WriteRawTag(42);
        output.WriteString(TargetLogId);
      }
      if (Replicator.Length != 0) {
        output.WriteRawTag(50);
        output.WriteString(Replicator);
      }
      if (currentTargetVersionVector_ != null) {
        output.WriteRawTag(58);
        output.WriteMessage(CurrentTargetVersionVector);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (FromSequenceNr != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(FromSequenceNr);
      }
      if (Max != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Max);
      }
      if (ScanLimit != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(ScanLimit);
      }
      if (filter_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Filter);
      }
      if (TargetLogId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(TargetLogId);
      }
      if (Replicator.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Replicator);
      }
      if (currentTargetVersionVector_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(CurrentTargetVersionVector);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ReplicationReadFormat other) {
      if (other == null) {
        return;
      }
      if (other.FromSequenceNr != 0L) {
        FromSequenceNr = other.FromSequenceNr;
      }
      if (other.Max != 0) {
        Max = other.Max;
      }
      if (other.ScanLimit != 0) {
        ScanLimit = other.ScanLimit;
      }
      if (other.filter_ != null) {
        if (filter_ == null) {
          filter_ = new global::Eventuate.Serialization.Proto.ReplicationFilterTreeFormat();
        }
        Filter.MergeFrom(other.Filter);
      }
      if (other.TargetLogId.Length != 0) {
        TargetLogId = other.TargetLogId;
      }
      if (other.Replicator.Length != 0) {
        Replicator = other.Replicator;
      }
      if (other.currentTargetVersionVector_ != null) {
        if (currentTargetVersionVector_ == null) {
          currentTargetVersionVector_ = new global::Eventuate.Serialization.Proto.VectorTimeFormat();
        }
        CurrentTargetVersionVector.MergeFrom(other.CurrentTargetVersionVector);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            FromSequenceNr = input.ReadInt64();
            break;
          }
          case 16: {
            Max = input.ReadInt32();
            break;
          }
          case 24: {
            ScanLimit = input.ReadInt32();
            break;
          }
          case 34: {
            if (filter_ == null) {
              filter_ = new global::Eventuate.Serialization.Proto.ReplicationFilterTreeFormat();
            }
            input.ReadMessage(filter_);
            break;
          }
          case 42: {
            TargetLogId = input.ReadString();
            break;
          }
          case 50: {
            Replicator = input.ReadString();
            break;
          }
          case 58: {
            if (currentTargetVersionVector_ == null) {
              currentTargetVersionVector_ = new global::Eventuate.Serialization.Proto.VectorTimeFormat();
            }
            input.ReadMessage(currentTargetVersionVector_);
            break;
          }
        }
      }
    }

  }

  internal sealed partial class ReplicationReadSuccessFormat : pb::IMessage<ReplicationReadSuccessFormat> {
    private static readonly pb::MessageParser<ReplicationReadSuccessFormat> _parser = new pb::MessageParser<ReplicationReadSuccessFormat>(() => new ReplicationReadSuccessFormat());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ReplicationReadSuccessFormat> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Eventuate.Serialization.Proto.ReplicationProtocolFormatsReflection.Descriptor.MessageTypes[11]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ReplicationReadSuccessFormat() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ReplicationReadSuccessFormat(ReplicationReadSuccessFormat other) : this() {
      events_ = other.events_.Clone();
      fromSequenceNr_ = other.fromSequenceNr_;
      replicationProgress_ = other.replicationProgress_;
      targetLogId_ = other.targetLogId_;
      CurrentSourceVersionVector = other.currentSourceVersionVector_ != null ? other.CurrentSourceVersionVector.Clone() : null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ReplicationReadSuccessFormat Clone() {
      return new ReplicationReadSuccessFormat(this);
    }

    /// <summary>Field number for the "events" field.</summary>
    public const int EventsFieldNumber = 1;
    private static readonly pb::FieldCodec<global::Eventuate.Serialization.Proto.DurableEventFormat> _repeated_events_codec
        = pb::FieldCodec.ForMessage(10, global::Eventuate.Serialization.Proto.DurableEventFormat.Parser);
    private readonly pbc::RepeatedField<global::Eventuate.Serialization.Proto.DurableEventFormat> events_ = new pbc::RepeatedField<global::Eventuate.Serialization.Proto.DurableEventFormat>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Eventuate.Serialization.Proto.DurableEventFormat> Events {
      get { return events_; }
    }

    /// <summary>Field number for the "fromSequenceNr" field.</summary>
    public const int FromSequenceNrFieldNumber = 2;
    private long fromSequenceNr_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long FromSequenceNr {
      get { return fromSequenceNr_; }
      set {
        fromSequenceNr_ = value;
      }
    }

    /// <summary>Field number for the "replicationProgress" field.</summary>
    public const int ReplicationProgressFieldNumber = 3;
    private long replicationProgress_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long ReplicationProgress {
      get { return replicationProgress_; }
      set {
        replicationProgress_ = value;
      }
    }

    /// <summary>Field number for the "targetLogId" field.</summary>
    public const int TargetLogIdFieldNumber = 4;
    private string targetLogId_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string TargetLogId {
      get { return targetLogId_; }
      set {
        targetLogId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "currentSourceVersionVector" field.</summary>
    public const int CurrentSourceVersionVectorFieldNumber = 5;
    private global::Eventuate.Serialization.Proto.VectorTimeFormat currentSourceVersionVector_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Eventuate.Serialization.Proto.VectorTimeFormat CurrentSourceVersionVector {
      get { return currentSourceVersionVector_; }
      set {
        currentSourceVersionVector_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ReplicationReadSuccessFormat);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ReplicationReadSuccessFormat other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!events_.Equals(other.events_)) return false;
      if (FromSequenceNr != other.FromSequenceNr) return false;
      if (ReplicationProgress != other.ReplicationProgress) return false;
      if (TargetLogId != other.TargetLogId) return false;
      if (!object.Equals(CurrentSourceVersionVector, other.CurrentSourceVersionVector)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= events_.GetHashCode();
      if (FromSequenceNr != 0L) hash ^= FromSequenceNr.GetHashCode();
      if (ReplicationProgress != 0L) hash ^= ReplicationProgress.GetHashCode();
      if (TargetLogId.Length != 0) hash ^= TargetLogId.GetHashCode();
      if (currentSourceVersionVector_ != null) hash ^= CurrentSourceVersionVector.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      events_.WriteTo(output, _repeated_events_codec);
      if (FromSequenceNr != 0L) {
        output.WriteRawTag(16);
        output.WriteInt64(FromSequenceNr);
      }
      if (ReplicationProgress != 0L) {
        output.WriteRawTag(24);
        output.WriteInt64(ReplicationProgress);
      }
      if (TargetLogId.Length != 0) {
        output.WriteRawTag(34);
        output.WriteString(TargetLogId);
      }
      if (currentSourceVersionVector_ != null) {
        output.WriteRawTag(42);
        output.WriteMessage(CurrentSourceVersionVector);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += events_.CalculateSize(_repeated_events_codec);
      if (FromSequenceNr != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(FromSequenceNr);
      }
      if (ReplicationProgress != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(ReplicationProgress);
      }
      if (TargetLogId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(TargetLogId);
      }
      if (currentSourceVersionVector_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(CurrentSourceVersionVector);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ReplicationReadSuccessFormat other) {
      if (other == null) {
        return;
      }
      events_.Add(other.events_);
      if (other.FromSequenceNr != 0L) {
        FromSequenceNr = other.FromSequenceNr;
      }
      if (other.ReplicationProgress != 0L) {
        ReplicationProgress = other.ReplicationProgress;
      }
      if (other.TargetLogId.Length != 0) {
        TargetLogId = other.TargetLogId;
      }
      if (other.currentSourceVersionVector_ != null) {
        if (currentSourceVersionVector_ == null) {
          currentSourceVersionVector_ = new global::Eventuate.Serialization.Proto.VectorTimeFormat();
        }
        CurrentSourceVersionVector.MergeFrom(other.CurrentSourceVersionVector);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            events_.AddEntriesFrom(input, _repeated_events_codec);
            break;
          }
          case 16: {
            FromSequenceNr = input.ReadInt64();
            break;
          }
          case 24: {
            ReplicationProgress = input.ReadInt64();
            break;
          }
          case 34: {
            TargetLogId = input.ReadString();
            break;
          }
          case 42: {
            if (currentSourceVersionVector_ == null) {
              currentSourceVersionVector_ = new global::Eventuate.Serialization.Proto.VectorTimeFormat();
            }
            input.ReadMessage(currentSourceVersionVector_);
            break;
          }
        }
      }
    }

  }

  internal sealed partial class ReplicationReadFailureFormat : pb::IMessage<ReplicationReadFailureFormat> {
    private static readonly pb::MessageParser<ReplicationReadFailureFormat> _parser = new pb::MessageParser<ReplicationReadFailureFormat>(() => new ReplicationReadFailureFormat());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ReplicationReadFailureFormat> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Eventuate.Serialization.Proto.ReplicationProtocolFormatsReflection.Descriptor.MessageTypes[12]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ReplicationReadFailureFormat() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ReplicationReadFailureFormat(ReplicationReadFailureFormat other) : this() {
      Cause = other.cause_ != null ? other.Cause.Clone() : null;
      targetLogId_ = other.targetLogId_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ReplicationReadFailureFormat Clone() {
      return new ReplicationReadFailureFormat(this);
    }

    /// <summary>Field number for the "cause" field.</summary>
    public const int CauseFieldNumber = 1;
    private global::Eventuate.Serialization.Proto.PayloadFormat cause_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Eventuate.Serialization.Proto.PayloadFormat Cause {
      get { return cause_; }
      set {
        cause_ = value;
      }
    }

    /// <summary>Field number for the "targetLogId" field.</summary>
    public const int TargetLogIdFieldNumber = 2;
    private string targetLogId_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string TargetLogId {
      get { return targetLogId_; }
      set {
        targetLogId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ReplicationReadFailureFormat);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ReplicationReadFailureFormat other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Cause, other.Cause)) return false;
      if (TargetLogId != other.TargetLogId) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (cause_ != null) hash ^= Cause.GetHashCode();
      if (TargetLogId.Length != 0) hash ^= TargetLogId.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (cause_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Cause);
      }
      if (TargetLogId.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(TargetLogId);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (cause_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Cause);
      }
      if (TargetLogId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(TargetLogId);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ReplicationReadFailureFormat other) {
      if (other == null) {
        return;
      }
      if (other.cause_ != null) {
        if (cause_ == null) {
          cause_ = new global::Eventuate.Serialization.Proto.PayloadFormat();
        }
        Cause.MergeFrom(other.Cause);
      }
      if (other.TargetLogId.Length != 0) {
        TargetLogId = other.TargetLogId;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            if (cause_ == null) {
              cause_ = new global::Eventuate.Serialization.Proto.PayloadFormat();
            }
            input.ReadMessage(cause_);
            break;
          }
          case 18: {
            TargetLogId = input.ReadString();
            break;
          }
        }
      }
    }

  }

  internal sealed partial class ReplicationReadSourceExceptionFormat : pb::IMessage<ReplicationReadSourceExceptionFormat> {
    private static readonly pb::MessageParser<ReplicationReadSourceExceptionFormat> _parser = new pb::MessageParser<ReplicationReadSourceExceptionFormat>(() => new ReplicationReadSourceExceptionFormat());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ReplicationReadSourceExceptionFormat> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Eventuate.Serialization.Proto.ReplicationProtocolFormatsReflection.Descriptor.MessageTypes[13]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ReplicationReadSourceExceptionFormat() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ReplicationReadSourceExceptionFormat(ReplicationReadSourceExceptionFormat other) : this() {
      message_ = other.message_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ReplicationReadSourceExceptionFormat Clone() {
      return new ReplicationReadSourceExceptionFormat(this);
    }

    /// <summary>Field number for the "message" field.</summary>
    public const int MessageFieldNumber = 1;
    private string message_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Message {
      get { return message_; }
      set {
        message_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ReplicationReadSourceExceptionFormat);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ReplicationReadSourceExceptionFormat other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Message != other.Message) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Message.Length != 0) hash ^= Message.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Message.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Message);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Message.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Message);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ReplicationReadSourceExceptionFormat other) {
      if (other == null) {
        return;
      }
      if (other.Message.Length != 0) {
        Message = other.Message;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            Message = input.ReadString();
            break;
          }
        }
      }
    }

  }

  internal sealed partial class IncompatibleApplicationVersionExceptionFormat : pb::IMessage<IncompatibleApplicationVersionExceptionFormat> {
    private static readonly pb::MessageParser<IncompatibleApplicationVersionExceptionFormat> _parser = new pb::MessageParser<IncompatibleApplicationVersionExceptionFormat>(() => new IncompatibleApplicationVersionExceptionFormat());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<IncompatibleApplicationVersionExceptionFormat> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Eventuate.Serialization.Proto.ReplicationProtocolFormatsReflection.Descriptor.MessageTypes[14]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public IncompatibleApplicationVersionExceptionFormat() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public IncompatibleApplicationVersionExceptionFormat(IncompatibleApplicationVersionExceptionFormat other) : this() {
      sourceEndpointId_ = other.sourceEndpointId_;
      SourceApplicationVersion = other.sourceApplicationVersion_ != null ? other.SourceApplicationVersion.Clone() : null;
      TargetApplicationVersion = other.targetApplicationVersion_ != null ? other.TargetApplicationVersion.Clone() : null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public IncompatibleApplicationVersionExceptionFormat Clone() {
      return new IncompatibleApplicationVersionExceptionFormat(this);
    }

    /// <summary>Field number for the "sourceEndpointId" field.</summary>
    public const int SourceEndpointIdFieldNumber = 1;
    private string sourceEndpointId_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string SourceEndpointId {
      get { return sourceEndpointId_; }
      set {
        sourceEndpointId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "sourceApplicationVersion" field.</summary>
    public const int SourceApplicationVersionFieldNumber = 2;
    private global::Eventuate.Serialization.Proto.ApplicationVersionFormat sourceApplicationVersion_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Eventuate.Serialization.Proto.ApplicationVersionFormat SourceApplicationVersion {
      get { return sourceApplicationVersion_; }
      set {
        sourceApplicationVersion_ = value;
      }
    }

    /// <summary>Field number for the "targetApplicationVersion" field.</summary>
    public const int TargetApplicationVersionFieldNumber = 3;
    private global::Eventuate.Serialization.Proto.ApplicationVersionFormat targetApplicationVersion_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Eventuate.Serialization.Proto.ApplicationVersionFormat TargetApplicationVersion {
      get { return targetApplicationVersion_; }
      set {
        targetApplicationVersion_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as IncompatibleApplicationVersionExceptionFormat);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(IncompatibleApplicationVersionExceptionFormat other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (SourceEndpointId != other.SourceEndpointId) return false;
      if (!object.Equals(SourceApplicationVersion, other.SourceApplicationVersion)) return false;
      if (!object.Equals(TargetApplicationVersion, other.TargetApplicationVersion)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (SourceEndpointId.Length != 0) hash ^= SourceEndpointId.GetHashCode();
      if (sourceApplicationVersion_ != null) hash ^= SourceApplicationVersion.GetHashCode();
      if (targetApplicationVersion_ != null) hash ^= TargetApplicationVersion.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (SourceEndpointId.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(SourceEndpointId);
      }
      if (sourceApplicationVersion_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(SourceApplicationVersion);
      }
      if (targetApplicationVersion_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(TargetApplicationVersion);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (SourceEndpointId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(SourceEndpointId);
      }
      if (sourceApplicationVersion_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(SourceApplicationVersion);
      }
      if (targetApplicationVersion_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(TargetApplicationVersion);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(IncompatibleApplicationVersionExceptionFormat other) {
      if (other == null) {
        return;
      }
      if (other.SourceEndpointId.Length != 0) {
        SourceEndpointId = other.SourceEndpointId;
      }
      if (other.sourceApplicationVersion_ != null) {
        if (sourceApplicationVersion_ == null) {
          sourceApplicationVersion_ = new global::Eventuate.Serialization.Proto.ApplicationVersionFormat();
        }
        SourceApplicationVersion.MergeFrom(other.SourceApplicationVersion);
      }
      if (other.targetApplicationVersion_ != null) {
        if (targetApplicationVersion_ == null) {
          targetApplicationVersion_ = new global::Eventuate.Serialization.Proto.ApplicationVersionFormat();
        }
        TargetApplicationVersion.MergeFrom(other.TargetApplicationVersion);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            SourceEndpointId = input.ReadString();
            break;
          }
          case 18: {
            if (sourceApplicationVersion_ == null) {
              sourceApplicationVersion_ = new global::Eventuate.Serialization.Proto.ApplicationVersionFormat();
            }
            input.ReadMessage(sourceApplicationVersion_);
            break;
          }
          case 26: {
            if (targetApplicationVersion_ == null) {
              targetApplicationVersion_ = new global::Eventuate.Serialization.Proto.ApplicationVersionFormat();
            }
            input.ReadMessage(targetApplicationVersion_);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// no fields
  /// </summary>
  internal sealed partial class ReplicationDueFormat : pb::IMessage<ReplicationDueFormat> {
    private static readonly pb::MessageParser<ReplicationDueFormat> _parser = new pb::MessageParser<ReplicationDueFormat>(() => new ReplicationDueFormat());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ReplicationDueFormat> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Eventuate.Serialization.Proto.ReplicationProtocolFormatsReflection.Descriptor.MessageTypes[15]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ReplicationDueFormat() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ReplicationDueFormat(ReplicationDueFormat other) : this() {
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ReplicationDueFormat Clone() {
      return new ReplicationDueFormat(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ReplicationDueFormat);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ReplicationDueFormat other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ReplicationDueFormat other) {
      if (other == null) {
        return;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code
